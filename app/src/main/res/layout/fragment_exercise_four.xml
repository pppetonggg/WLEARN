<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <ScrollView
        android:layout_width="match_parent"
        android:layout_height="match_parent">

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="vertical"
            android:background="#FFFFFF">
            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_gravity="center_horizontal"
                android:textSize="25sp"
                android:textColor="@android:color/black"
                android:layout_marginTop="30dp"
                android:text="Exercise 4">
            </TextView>

            <TextView
                android:layout_marginHorizontal="20dp"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginTop="20dp"
                android:text="1.	What is the difference between “Flow Control” and “Congestion Control” as applied to TCP transmission?">
            </TextView>
            <TextView
                android:layout_marginHorizontal="20dp"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:textColor="@android:color/holo_green_dark"
                android:text="     Flow control is the receiver controlling how much the sender is injecting into the network, whereas Congestion Control is the sender sensing congestion on the network by timing ACKs and controlling its sending rate.\n">
            </TextView>

            <TextView
                android:layout_marginHorizontal="20dp"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="2.	Why does TCP Reno get rid of slow start phase when a triple duplicate ACK is received?">
            </TextView>
            <TextView
                android:layout_marginHorizontal="20dp"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:textColor="@android:color/holo_green_dark"
                android:text="     The receipt of triple duplicate ACKs indicates that some segments are getting through, and so congestion may be less severe. Thus, instead of wasting bandwidth, TCP tries a more aggressive strategy, by starting cwind at the current ssthreshold value rather than at 1 MSS. This is ½ the cwind value when the packet was dropped.\n">
            </TextView>

            <TextView
                android:layout_marginHorizontal="20dp"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="3.	Assume that we change the code of TCP by modifying the congestion avoidance phase as follows. For every acknowledgement received, we increase the window size as in slow start. Give the pros and cons of this modification.">
            </TextView>
            <TextView
                android:layout_marginHorizontal="20dp"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:textColor="@android:color/holo_green_dark"
                android:text="     This is roughly equivalent to performing multiplicative increase by a factor of 2, instead of additive increase. But we know that this is bad because it will not provide fairness.
\n     •	Pros: if I am the only one doing this, I am more aggressive and will gain higher throughput, at the expense of others.
\n     •	Cons: if everyone does this, the network will not distribute rates according to any form of fairness. Connections that have a high share (because the network was lightly loaded when they started) will continue tohave a higher share than others during periods of congestion.
\n\n\n\n\n\n">
            </TextView>


        </LinearLayout>
    </ScrollView>
</androidx.constraintlayout.widget.ConstraintLayout>